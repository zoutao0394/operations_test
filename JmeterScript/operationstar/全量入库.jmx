<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.0 r1840935">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="测试计划" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="全量入库" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">2</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="计数器" enabled="true">
          <stringProp name="CounterConfig.start">0</stringProp>
          <stringProp name="CounterConfig.end"></stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">control</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie管理器" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        </CookieManager>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="time" elementType="Argument">
              <stringProp name="Argument.name">time</stringProp>
              <stringProp name="Argument.value">${__time(yyyy-MM-dd,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="time1" elementType="Argument">
              <stringProp name="Argument.name">time1</stringProp>
              <stringProp name="Argument.value">${__timeShift(,,,,yyyy-MM-dd)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="time2" elementType="Argument">
              <stringProp name="Argument.name">time2</stringProp>
              <stringProp name="Argument.value">${__timeShift(,yyyyMMddHHmmss,,,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="num" elementType="Argument">
              <stringProp name="Argument.name">num</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="数据库连接" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery">select 1</stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">test</stringProp>
          <stringProp name="dbUrl">jdbc:mysql://172.16.20.5:33306/autotest?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=UTC</stringProp>
          <stringProp name="driver">com.mysql.jdbc.Driver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">123456</stringProp>
          <stringProp name="poolMax">3</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">testuser</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="执行测试" enabled="true">
          <stringProp name="IfController.condition">${control} == 0;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="加载初始信息" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="标记任务开始" enabled="true">
              <stringProp name="dataSource">test</stringProp>
              <stringProp name="query">update auto_operation set status=1,result=&apos;上次执行：运行中&apos; where operation=&quot;全量出库&quot;;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取账号" enabled="true">
              <stringProp name="dataSource">test</stringProp>
              <stringProp name="query">select testuser from auto_testuser where status=0 limit 1;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">user</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="锁定账号" enabled="true">
              <stringProp name="dataSource">test</stringProp>
              <stringProp name="query">update auto_testuser set status=1 where testuser=&apos;${user_1}&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">user</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取仓库及会员信息" enabled="true">
              <stringProp name="dataSource">test</stringProp>
              <stringProp name="query">SELECT
	warehouseID,
	warehousename,
	memberID,
	membername,
	memberno 
FROM
	auto_warehouemember 
WHERE
	id = ( SELECT warehousememberid FROM auto_control WHERE STATUS = 0 and userid = (select userid from auto_user where `user` = &apos;zoutao&apos;) );</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">warehouseID,warehousename,memberID,membername,memberno</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取oms配置信息" enabled="true">
              <stringProp name="dataSource">test</stringProp>
              <stringProp name="query">SELECT HOST
	,
PORT 
FROM
	auto_host t1
	JOIN auto_warehouemember t2 ON t1.environmentid = t2.environmentid
	JOIN auto_control t3 ON t2.id = t3.warehousememberid 
WHERE
	t3.`status` = 0 
	and t3. userid = (select userid from auto_user where `user` = &apos;zoutao&apos;)
	AND t1.site = &apos;oms&apos;;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">omshost,omsport</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取wi配置信息" enabled="true">
              <stringProp name="dataSource">test</stringProp>
              <stringProp name="query">SELECT HOST
	,
PORT 
FROM
	auto_host t1
	JOIN auto_warehouemember t2 ON t1.environmentid = t2.environmentid
	JOIN auto_control t3 ON t2.id = t3.warehousememberid 
WHERE
	t3.`status` = 0 
	and t3. userid = (select userid from auto_user where `user` = &apos;zoutao&apos;)
	AND t1.site = &apos;wi&apos;;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">wihost,wiport</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取basic配置信息" enabled="true">
              <stringProp name="dataSource">test</stringProp>
              <stringProp name="query">SELECT HOST
	,
PORT ,
t4.code
FROM
	auto_host t1
	JOIN auto_warehouemember t2 ON t1.environmentid = t2.environmentid
	JOIN auto_control t3 ON t2.id = t3.warehousememberid 
	JOIN auto_environment t4 on t1.environmentid = t4.environmentid
WHERE
	t3.`status` = 0 
	and t3. userid = (select userid from auto_user where `user` = &apos;zoutao&apos;)
	AND t1.site = &apos;basic&apos;;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">basichost,basicport,code</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取os配置信息" enabled="true">
              <stringProp name="dataSource">test</stringProp>
              <stringProp name="query">SELECT HOST
	,
PORT 
FROM
	auto_host t1
	JOIN auto_warehouemember t2 ON t1.environmentid = t2.environmentid
	JOIN auto_control t3 ON t2.id = t3.warehousememberid 
WHERE
	t3.`status` = 0 
	and t3. userid = (select userid from auto_user where `user` = &apos;zoutao&apos;)
	AND t1.site = &apos;os&apos;;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">oshost,osport</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取opw配置信息" enabled="true">
              <stringProp name="dataSource">test</stringProp>
              <stringProp name="query">SELECT HOST
	,
PORT 
FROM
	auto_host t1
	JOIN auto_warehouemember t2 ON t1.environmentid = t2.environmentid
	JOIN auto_control t3 ON t2.id = t3.warehousememberid 
WHERE
	t3.`status` = 0 
	and t3. userid = (select userid from auto_user where `user` = &apos;zoutao&apos;)
	AND t1.site = &apos;opw&apos;;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">opwhost,opwport</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取op配置信息" enabled="true">
              <stringProp name="dataSource">test</stringProp>
              <stringProp name="query">SELECT HOST
	,
PORT 
FROM
	auto_host t1
	JOIN auto_warehouemember t2 ON t1.environmentid = t2.environmentid
	JOIN auto_control t3 ON t2.id = t3.warehousememberid 
WHERE
	t3.`status` = 0 
	and t3. userid = (select userid from auto_user where `user` = &apos;zoutao&apos;)
	AND t1.site = &apos;op&apos;;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">ophost,opport</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取opr配置信息" enabled="true">
              <stringProp name="dataSource">test</stringProp>
              <stringProp name="query">SELECT HOST
	,
PORT 
FROM
	auto_host t1
	JOIN auto_warehouemember t2 ON t1.environmentid = t2.environmentid
	JOIN auto_control t3 ON t2.id = t3.warehousememberid 
WHERE
	t3.`status` = 0 
	and t3. userid = (select userid from auto_user where `user` = &apos;zoutao&apos;)
	AND t1.site = &apos;opr&apos;;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">oprhost,oprport</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取master配置信息" enabled="true">
              <stringProp name="dataSource">test</stringProp>
              <stringProp name="query">SELECT HOST
	,
PORT 
FROM
	auto_host t1
	JOIN auto_warehouemember t2 ON t1.environmentid = t2.environmentid
	JOIN auto_control t3 ON t2.id = t3.warehousememberid 
WHERE
	t3.`status` = 0 
	and t3. userid = (select userid from auto_user where `user` = &apos;zoutao&apos;)
	AND t1.site = &apos;master&apos;;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">masterhost,masterport</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取so配置信息" enabled="true">
              <stringProp name="dataSource">test</stringProp>
              <stringProp name="query">SELECT HOST
	,
PORT 
FROM
	auto_host t1
	JOIN auto_warehouemember t2 ON t1.environmentid = t2.environmentid
	JOIN auto_control t3 ON t2.id = t3.warehousememberid 
WHERE
	t3.`status` = 0 
	and t3. userid = (select userid from auto_user where `user` = &apos;zoutao&apos;)
	AND t1.site = &apos;so&apos;;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">sohost,soport</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="获取账号" enabled="true">
              <stringProp name="dataSource">test</stringProp>
              <stringProp name="query">select testuser from auto_testuser where status=0 limit 1;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">user</stringProp>
            </JDBCSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登陆" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="LoginNo" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">LoginNo</stringProp>
                    <stringProp name="Argument.value">${user_1}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="ComputerId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ComputerId</stringProp>
                    <stringProp name="Argument.value">9df2587225bb9a5cfffedef84491c4dc</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="AppKey" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">AppKey</stringProp>
                    <stringProp name="Argument.value">670b14728ad9902aecba32e22fa4dd34</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="ReturnUrl" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ReturnUrl</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="LoginPassword" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">LoginPassword</stringProp>
                    <stringProp name="Argument.value">a123456</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="CaptchaValidator" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${code_1}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">CaptchaValidator</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${basichost_1}</stringProp>
              <stringProp name="HTTPSampler.port">${basicport_1}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/Login</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://58.240.229.37:8090/Login/Index</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">zh-CN,zh;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">http://58.240.229.37:8090</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                  </elementProp>
                  <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                    <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Cache-Control" elementType="Header">
                    <stringProp name="Header.name">Cache-Control</stringProp>
                    <stringProp name="Header.value">max-age=0</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="入库" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">1</stringProp>
          </LoopController>
          <hashTree>
            <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="wi默认配置" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${wihost_1}</stringProp>
              <stringProp name="HTTPSampler.port">${wiport_1}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </ConfigTestElement>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="到货通知查询" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="searchText" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">searchText</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="sortName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">sortName</stringProp>
                    <stringProp name="Argument.value">CreateDate</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="sortOrder" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">sortOrder</stringProp>
                    <stringProp name="Argument.value">DESC</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="pageSize" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">pageSize</stringProp>
                    <stringProp name="Argument.value">20</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="pageNumber" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">pageNumber</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="PageSize" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">PageSize</stringProp>
                    <stringProp name="Argument.value">20</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="PageCurrent" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">PageCurrent</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="StartTime" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">StartTime</stringProp>
                    <stringProp name="Argument.value"> ${time} 00:00:00 </stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="EndTime" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">EndTime</stringProp>
                    <stringProp name="Argument.value">  ${time} 23:59:59</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="PageType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">PageType</stringProp>
                    <stringProp name="Argument.value">2</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="InStatus" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">InStatus</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="InCodes" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">InCodes</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="SyncIds" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">SyncIds</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="MemberNo" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">MemberNo</stringProp>
                    <stringProp name="Argument.value">${memberno_1}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="MemberID" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">MemberID</stringProp>
                    <stringProp name="Argument.value">${memberID_1}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="WareHouseName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">WareHouseName</stringProp>
                    <stringProp name="Argument.value">${warehousename_1}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="WarehouseID" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">WarehouseID</stringProp>
                    <stringProp name="Argument.value">${warehouseID_1}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="ErpSyncIds" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ErpSyncIds</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="BarCodes" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">BarCodes</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="Memo" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">Memo</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/WareHouseIN/Arrival/Query</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://172.16.20.6:8015/WareHouseIN/Arrival/Arrival?systemCode=wms&amp;moduleTitle=%E5%88%B0%E8%B4%A7%E9%80%9A%E7%9F%A5</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">zh-CN,zh;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="X-Requested-With" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="the_request_service" elementType="Header">
                    <stringProp name="Header.name">the_request_service</stringProp>
                    <stringProp name="Header.value">wms</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">InCode</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;ArriveStatusName&quot;:&quot;未到货&quot;,.+?&quot;InCode&quot;:&quot;(.+?)&quot;,</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">-1</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="处理到货入库的单据" enabled="true">
              <stringProp name="ForeachController.inputVal">InCode</stringProp>
              <stringProp name="ForeachController.returnVal">incode</stringProp>
              <boolProp name="ForeachController.useSeparator">true</boolProp>
            </ForeachController>
            <hashTree>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="到货登记" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">1</stringProp>
              </LoopController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="到货登记" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="inCode" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">inCode</stringProp>
                        <stringProp name="Argument.value">${incode}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="WarehouseID" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">WarehouseID</stringProp>
                        <stringProp name="Argument.value">${warehouseID_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="ttWmsWarehouseinarrivalM[InID]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">ttWmsWarehouseinarrivalM[InID]</stringProp>
                        <stringProp name="Argument.value">${incode}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="ttWmsWarehouseinarrivalM[TransExpress]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">ttWmsWarehouseinarrivalM[TransExpress]</stringProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="ttWmsWarehouseinarrivalM[TransMethod]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">ttWmsWarehouseinarrivalM[TransMethod]</stringProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="ttWmsWarehouseinarrivalM[CarryCode]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">ttWmsWarehouseinarrivalM[CarryCode]</stringProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="ttWmsWarehouseinarrivalM[ArrivalDriverMessage]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">ttWmsWarehouseinarrivalM[ArrivalDriverMessage]</stringProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="ttWmsWarehouseinarrivalM[ArrivalMemo]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">ttWmsWarehouseinarrivalM[ArrivalMemo]</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="ttWmsWarehouseinarrivalM[BeginUnloadTime]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">ttWmsWarehouseinarrivalM[BeginUnloadTime]</stringProp>
                        <stringProp name="Argument.value">${time} 00:00:00 </stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="ttWmsWarehouseinarrivalM[EndUnloadTime]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">ttWmsWarehouseinarrivalM[EndUnloadTime]</stringProp>
                        <stringProp name="Argument.value"> ${time} 23:59:59</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="ttWmsWarehouseinarrivalM[UnloadGroup]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">ttWmsWarehouseinarrivalM[UnloadGroup]</stringProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="ttWmsWarehouseinarrivalM[BoxAmount]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">ttWmsWarehouseinarrivalM[BoxAmount]</stringProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="ttWmsWarehouseinarrivalM[AreaAmount]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">ttWmsWarehouseinarrivalM[AreaAmount]</stringProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="ttWmsWarehouseinarrivalM[IsOwnUnload]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">ttWmsWarehouseinarrivalM[IsOwnUnload]</stringProp>
                        <stringProp name="Argument.value">false</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="ttWmsWarehouseinarrivalM[IsReceipt]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">ttWmsWarehouseinarrivalM[IsReceipt]</stringProp>
                        <stringProp name="Argument.value">2</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="ttWmsWarehouseinarrivalM[ArrivalDate]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">ttWmsWarehouseinarrivalM[ArrivalDate]</stringProp>
                        <stringProp name="Argument.value">${time}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">/WareHouseIN/Arrival/Add</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">http://cloud.wms.within.fineex.net/WareHouseIN/Arrival/ArrivalDetail?incode=RCG1190703000076&amp;WarehouseID=24009&amp;systemCode=wms</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">zh-CN,zh;q=0.9</stringProp>
                      </elementProp>
                      <elementProp name="Origin" elementType="Header">
                        <stringProp name="Header.name">Origin</stringProp>
                        <stringProp name="Header.value">http://cloud.wms.within.fineex.net</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36</stringProp>
                      </elementProp>
                      <elementProp name="the_request_service" elementType="Header">
                        <stringProp name="Header.name">the_request_service</stringProp>
                        <stringProp name="Header.value">wms</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1287438623">{&quot;isSuccess&quot;:true,&quot;Message&quot;:&quot;保存成功！&quot;}</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="PC非箱唛收货" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">1</stringProp>
              </LoopController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取InID" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="InCode" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">InCode</stringProp>
                        <stringProp name="Argument.value">${incode}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="ReceiptType" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">ReceiptType</stringProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="StockType" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">StockType</stringProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="WarehouseID" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">WarehouseID</stringProp>
                        <stringProp name="Argument.value">${warehouseID_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${wihost_1}</stringProp>
                  <stringProp name="HTTPSampler.port">${wiport_1}</stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">/WareHouseIN/Pcgoods/checkInCode</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">http://58.240.229.37:8015/WareHouseIN/Pcgoods/Pcgoods?systemCode=wms&amp;moduleTitle=%E6%94%B6%E8%B4%A7%E7%AE%A1%E7%90%86</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">zh-CN,zh;q=0.9</stringProp>
                      </elementProp>
                      <elementProp name="Origin" elementType="Header">
                        <stringProp name="Header.name">Origin</stringProp>
                        <stringProp name="Header.value">http://58.240.229.37:8015</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36</stringProp>
                      </elementProp>
                      <elementProp name="the_request_service" elementType="Header">
                        <stringProp name="Header.name">the_request_service</stringProp>
                        <stringProp name="Header.value">wms</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">inid</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;InID&quot;:(.+?),</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default"></stringProp>
                    <stringProp name="RegexExtractor.match_number">0</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">RelationID</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;RelationID&quot;:&quot;(.+?)&quot;,</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default"></stringProp>
                    <stringProp name="RegexExtractor.match_number">0</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="生成入库收货详情" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray; 
import com.alibaba.fastjson.JSONObject;
// 获取数据

String response = prev.getResponseDataAsString();  // 获取Response

JSONObject responseObj = JSON.parseObject(response);  // 整个Response作为JSON对象

JSONArray listArray = responseObj.getJSONArray(&quot;warehouseindetailVMList&quot;);  // 获取列表。即，json串中[]的内容

String memberID = vars.get(&quot;memberID_1&quot;);
String warehouseID = vars.get(&quot;warehouseID_1&quot;);
String membername = vars.get(&quot;membername_1&quot;);
String warehousename = vars.get(&quot;warehousename_1&quot;);
String memberno = vars.get(&quot;memberno_1&quot;);
String inid = vars.get(&quot;inid&quot;);
String RelationID = vars.get(&quot;RelationID&quot;);
String time1 = vars.get(&quot;time1&quot;);
String time = vars.get(&quot;time&quot;);


int len = listArray.size();
String[] tempa = new String[len];
String[] tempb = new String[len];
String[] tempc = new String[len];
String[] tempd = new String[len];
String[] tempe = new String[len];

StringBuffer sBuffer = new StringBuffer(&quot;&quot;);

sBuffer.append(&quot;InID=&quot;).append(inid).append(&quot;&amp;WarehouseID=&quot;).append(warehouseID).append(&quot;&amp;MemberID=&quot;).append(memberID).append(&quot;&amp;source=1&amp;ReceiptType=1&amp;StockType=1&amp;RelationID=&quot;).append(RelationID).append(&quot;&amp;ProductBatch%5B0%5D%5BProductBatchCode%5D=&quot;).append(time1).append(&quot;&amp;ProductBatch%5B0%5D%5BProductionDate%5D=&quot;).append(time).append(&quot;&amp;ProductBatch%5B0%5D%5BExpirationDate%5D=&amp;ProductBatch%5B0%5D%5BInDate%5D=&amp;ProductBatch%5B0%5D%5BInBatch%5D=&amp;ProductBatch%5B0%5D%5BCustomBatch%5D=&amp;ProductBatch%5B0%5D%5BCommodityOwner%5D=&amp;ProductBatch%5B0%5D%5BCommodityOwnerName%5D=&amp;ProductBatch%5B0%5D%5BRelationID%5D=&quot;).append(RelationID);

for(int i=0;i&lt;len;i++){
	

	tempa[i]= listArray.getJSONObject(i).getString(&quot;CommodityID&quot;);
	tempb[i]= listArray.getJSONObject(i).getString(&quot;BarCode&quot;);
	tempc[i]= listArray.getJSONObject(i).getString(&quot;CommodityCode&quot;);
	tempd[i]= listArray.getJSONObject(i).getString(&quot;CommodityName&quot;);
	tempe[i]= listArray.getJSONObject(i).getString(&quot;Amount&quot;);

	
	
	sBuffer.append(&quot;&amp;receiptDetailList%5B&quot;).append(i).append(&quot;%5D%5BCommodityID%5D=&quot;).append(tempa[i]);
	sBuffer.append(&quot;&amp;receiptDetailList%5B&quot;).append(i).append(&quot;%5D%5BStand%5D=&quot;);
	sBuffer.append(&quot;&amp;receiptDetailList%5B&quot;).append(i).append(&quot;%5D%5BBarCode%5D=&quot;).append(tempb[i]);
	sBuffer.append(&quot;&amp;receiptDetailList%5B&quot;).append(i).append(&quot;%5D%5BCommodityCode%5D=&quot;).append(tempc[i]);
	sBuffer.append(&quot;&amp;receiptDetailList%5B&quot;).append(i).append(&quot;%5D%5BCommodityName%5D=&quot;).append(tempd[i]);
	sBuffer.append(&quot;&amp;receiptDetailList%5B&quot;).append(i).append(&quot;%5D%5BProductBatchCode%5D=&quot;).append(time1);
	sBuffer.append(&quot;&amp;receiptDetailList%5B&quot;).append(i).append(&quot;%5D%5BProductionDate%5D=&quot;).append(time);
	sBuffer.append(&quot;&amp;receiptDetailList%5B&quot;).append(i).append(&quot;%5D%5BStockType%5D=1&quot;);
	sBuffer.append(&quot;&amp;receiptDetailList%5B&quot;).append(i).append(&quot;%5D%5Bbatchlock%5D=1&quot;);
	sBuffer.append(&quot;&amp;receiptDetailList%5B&quot;).append(i).append(&quot;%5D%5BrowIndex%5D=1&quot;);
	sBuffer.append(&quot;&amp;receiptDetailList%5B&quot;).append(i).append(&quot;%5D%5BRelationID%5D=&quot;).append(RelationID);
	sBuffer.append(&quot;&amp;receiptDetailList%5B&quot;).append(i).append(&quot;%5D%5Bamount%5D=&quot;).append(tempe[i]);
	sBuffer.append(&quot;&amp;receiptDetailList%5B&quot;).append(i).append(&quot;%5D%5BOverplusAmount%5D=0&quot;);

}

String keywordStr = sBuffer.toString();
vars.put(&quot;receiptdetail&quot;,keywordStr);</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="完成收货" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${receiptdetail}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">/WareHouseIN/Pcgoods/saveReceipt</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">http://58.240.229.37:8015/WareHouseIN/Pcgoods/Pcgoods?systemCode=wms&amp;moduleTitle=%E6%94%B6%E8%B4%A7%E7%AE%A1%E7%90%86</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">zh-CN,zh;q=0.9</stringProp>
                      </elementProp>
                      <elementProp name="Origin" elementType="Header">
                        <stringProp name="Header.name">Origin</stringProp>
                        <stringProp name="Header.value">http://58.240.229.37:8015</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36</stringProp>
                      </elementProp>
                      <elementProp name="the_request_service" elementType="Header">
                        <stringProp name="Header.name">the_request_service</stringProp>
                        <stringProp name="Header.value">wms</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-563215660">&quot;errorMsg&quot;:[&quot;保存成功！&quot;],</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="PC入库上架" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">1</stringProp>
              </LoopController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="查询仓库库位信息" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&quot;sortName&quot;:&quot;MixTypeName&quot;,&quot;sortOrder&quot;:&quot;asc&quot;,&quot;pageSize&quot;:10,&quot;pageNumber&quot;:1,&quot;PosCode&quot;:&quot;&quot;,&quot;IsLock&quot;:&quot;0&quot;,&quot;mu-warehouse&quot;:&quot;${warehousename_1}~${membername_1}&quot;,&quot;MemberNo&quot;:&quot;${memberno_1}&quot;,&quot;MemberID&quot;:&quot;${memberID_1}&quot;,&quot;WareHouseName&quot;:&quot;${warehousename_1}&quot;,&quot;WarehouseID&quot;:&quot;${warehouseID_1}&quot;,&quot;PosType&quot;:&quot;1&quot;,&quot;StockType&quot;:&quot;1&quot;,&quot;Area&quot;:&quot;&quot;,&quot;Tunnel&quot;:&quot;&quot;,&quot;IsPick&quot;:&quot;1&quot;,&quot;IsCheckLock&quot;:&quot;0&quot;}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${masterhost_1}</stringProp>
                  <stringProp name="HTTPSampler.port">${masterport_1}</stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">/BasicInfo/StorageLocationManage/QueryPosData</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">http://master.uat.fineex.net:8090/BasicInfo/StorageLocationManage/StorageLocationManage?systemCode=wms&amp;moduleTitle=%E5%BA%93%E4%BD%8D%E7%AE%A1%E7%90%86</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">zh-CN,zh;q=0.9</stringProp>
                      </elementProp>
                      <elementProp name="Origin" elementType="Header">
                        <stringProp name="Header.name">Origin</stringProp>
                        <stringProp name="Header.value">http://master.uat.fineex.net:8090</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36</stringProp>
                      </elementProp>
                      <elementProp name="the_request_service" elementType="Header">
                        <stringProp name="Header.name">the_request_service</stringProp>
                        <stringProp name="Header.value">wms</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="pos" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">pos</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;PosID&quot;:(.+?),&quot;PosCode&quot;:&quot;(.+?)&quot;,</stringProp>
                    <stringProp name="RegexExtractor.template">$1$;$2$</stringProp>
                    <stringProp name="RegexExtractor.default"></stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取ProductBatchID" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="inId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">inId</stringProp>
                        <stringProp name="Argument.value">${inid}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="WarehouseID" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">WarehouseID</stringProp>
                        <stringProp name="Argument.value">${warehouseID_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="MemberID" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">MemberID</stringProp>
                        <stringProp name="Argument.value">${memberID_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">/WareHouseIN/AddShelf/GetShelfInfoByInId</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">http://58.240.229.37:8015/WareHouseIN/AddShelf/AddShelf?inId=742501&amp;inCode=RCG901190709000019&amp;WarehouseID=24304&amp;MemberID=24305&amp;systemCode=wms</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">zh-CN,zh;q=0.9</stringProp>
                      </elementProp>
                      <elementProp name="Origin" elementType="Header">
                        <stringProp name="Header.name">Origin</stringProp>
                        <stringProp name="Header.value">http://58.240.229.37:8015</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36</stringProp>
                      </elementProp>
                      <elementProp name="the_request_service" elementType="Header">
                        <stringProp name="Header.name">the_request_service</stringProp>
                        <stringProp name="Header.value">wms</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">ProductBatchID</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;ProductBatchID&quot;:(.+?),</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default"></stringProp>
                    <stringProp name="RegexExtractor.match_number">0</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="生成上架信息" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray; 
import com.alibaba.fastjson.JSONObject;
// 获取数据

String response = prev.getResponseDataAsString();  // 获取Response

JSONObject responseObj = JSON.parseObject(response);  // 整个Response作为JSON对象

JSONArray listArray = responseObj.getJSONArray(&quot;rows&quot;);  // 获取列表。即，json串中[]的内容

String memberID = vars.get(&quot;memberID_1&quot;);
String warehouseID = vars.get(&quot;warehouseID_1&quot;);
String membername = vars.get(&quot;membername_1&quot;);
String warehousename = vars.get(&quot;warehousename_1&quot;);
String memberno = vars.get(&quot;memberno_1&quot;);
String inid = vars.get(&quot;inid&quot;);
String time1 = vars.get(&quot;time1&quot;);
String time = vars.get(&quot;time&quot;);



int len = listArray.size();
String[] tempa = new String[len];
String[] tempb = new String[len];
String[] tempc = new String[len];
String[] tempd = new String[len];
String[] tempe = new String[len];
//String[] tempf = new String[len];
String[] tempg = new String[len];
String[] tempj = new String[len];
//String[] temph = new String[len];
String[] tempi = new String[len];
//String[] tempj = new String[len];
String[] tempk = new String[len];
String[] templ = new String[len];
String[] tempm = new String[len];
String[] tempn = new String[len];
String[] tempo = new String[len];
String[] tempp = new String[len];
String[] tempq = new String[len];
String[] tempr = new String[len];
String[] temps = new String[len];
String[] tempt = new String[len];
String[] tempu = new String[len];
String[] tempv = new String[len];
String[] tempw = new String[len];


StringBuffer sBuffer = new StringBuffer(&quot;&quot;);

sBuffer.append(&quot;memberId=&quot;).append(memberID).append(&quot;&amp;inId=&quot;).append(inid).append(&quot;&amp;wareHouseId=&quot;).append(warehouseID);

for(int i=0;i&lt;len;i++){
	

	tempa[i]= listArray.getJSONObject(i).getString(&quot;UpShelvesID&quot;);
	tempb[i]= listArray.getJSONObject(i).getString(&quot;BarCode&quot;);
	tempc[i]= listArray.getJSONObject(i).getString(&quot;CommodityID&quot;);
	tempd[i]= listArray.getJSONObject(i).getString(&quot;CommodityCode&quot;);
	tempe[i]= listArray.getJSONObject(i).getString(&quot;CommodityName&quot;);
//	tempf[i]= listArray.getJSONObject(i).getString(&quot;Stand&quot;);
	tempg[i]= listArray.getJSONObject(i).getString(&quot;ProductBatchID&quot;);
//	temph[i]= listArray.getJSONObject(i).getString(&quot;DefaultBatch&quot;);
//	tempi[i]= listArray.getJSONObject(i).getString(&quot;ProductBatchCode&quot;);
	tempj[i]= listArray.getJSONObject(i).getString(&quot;PosID&quot;);
	tempk[i]= listArray.getJSONObject(i).getString(&quot;PosCode&quot;);
	templ[i]= listArray.getJSONObject(i).getString(&quot;StockType&quot;);
	tempm[i]= listArray.getJSONObject(i).getString(&quot;StockTypeName&quot;);
	tempn[i]= listArray.getJSONObject(i).getString(&quot;ReceiptAmount&quot;);
	tempo[i]= listArray.getJSONObject(i).getString(&quot;CommitedAmount&quot;);
	tempp[i]= listArray.getJSONObject(i).getString(&quot;ShelfedAmount&quot;);
//	tempq[i]= listArray.getJSONObject(i).getString(&quot;PlanToShelfAmout&quot;);
	tempr[i]= listArray.getJSONObject(i).getString(&quot;UnionID&quot;);
	temps[i]= listArray.getJSONObject(i).getString(&quot;SerialNumber&quot;);
	tempt[i]= listArray.getJSONObject(i).getString(&quot;IsMain&quot;);
	tempu[i]= listArray.getJSONObject(i).getString(&quot;ShelfAmout&quot;);
	tempv[i]= listArray.getJSONObject(i).getString(&quot;InID&quot;);
	tempw[i]= listArray.getJSONObject(i).getString(&quot;InCode&quot;);

	sBuffer.append(&quot;&amp;list%5B&quot;).append(i).append(&quot;%5D%5B0%5D=true&quot;);
	sBuffer.append(&quot;&amp;list%5B&quot;).append(i).append(&quot;%5D%5BUpShelvesID%5D=&quot;).append(tempa[i]);
	sBuffer.append(&quot;&amp;list%5B&quot;).append(i).append(&quot;%5D%5BBarCode%5D=&quot;).append(tempb[i]);
	sBuffer.append(&quot;&amp;list%5B&quot;).append(i).append(&quot;%5D%5BCommodityID%5D=&quot;).append(tempc[i]);
	sBuffer.append(&quot;&amp;list%5B&quot;).append(i).append(&quot;%5D%5BCommodityCode%5D=&quot;).append(tempd[i]);
	sBuffer.append(&quot;&amp;list%5B&quot;).append(i).append(&quot;%5D%5BCommodityName%5D=&quot;).append(tempe[i]);
	sBuffer.append(&quot;&amp;list%5B&quot;).append(i).append(&quot;%5D%5BStand%5D=&quot;);
	sBuffer.append(&quot;&amp;list%5B&quot;).append(i).append(&quot;%5D%5BProductBatchID%5D=&quot;).append(tempg[i]);
	sBuffer.append(&quot;&amp;list%5B&quot;).append(i).append(&quot;%5D%5BProductBatchCode%5D=&quot;).append(time);
	sBuffer.append(&quot;&amp;list%5B&quot;).append(i).append(&quot;%5D%5BPosID%5D=&quot;).append(tempj[i]);
	sBuffer.append(&quot;&amp;list%5B&quot;).append(i).append(&quot;%5D%5BPosCode%5D=&quot;);
	sBuffer.append(&quot;&amp;list%5B&quot;).append(i).append(&quot;%5D%5BStockType%5D=&quot;).append(templ[i]);
	sBuffer.append(&quot;&amp;list%5B&quot;).append(i).append(&quot;%5D%5BStockTypeName%5D=&quot;).append(tempm[i]);
	sBuffer.append(&quot;&amp;list%5B&quot;).append(i).append(&quot;%5D%5BReceiptAmount%5D=&quot;).append(tempn[i]);
	sBuffer.append(&quot;&amp;list%5B&quot;).append(i).append(&quot;%5D%5BCommitedAmount%5D=&quot;).append(tempo[i]);
	sBuffer.append(&quot;&amp;list%5B&quot;).append(i).append(&quot;%5D%5BShelfedAmount%5D=&quot;).append(tempp[i]);
	sBuffer.append(&quot;&amp;list%5B&quot;).append(i).append(&quot;%5D%5BPlanToShelfAmout%5D=&quot;).append(tempn[i]);
	sBuffer.append(&quot;&amp;list%5B&quot;).append(i).append(&quot;%5D%5BUnionID%5D=&quot;);
	sBuffer.append(&quot;&amp;list%5B&quot;).append(i).append(&quot;%5D%5BSerialNumber%5D=&quot;).append(temps[i]);
	sBuffer.append(&quot;&amp;list%5B&quot;).append(i).append(&quot;%5D%5BIsMain%5D=false&quot;);
	sBuffer.append(&quot;&amp;list%5B&quot;).append(i).append(&quot;%5D%5BShelfAmout%5D=&quot;).append(tempu[i]);
	sBuffer.append(&quot;&amp;list%5B&quot;).append(i).append(&quot;%5D%5BInID%5D=&quot;).append(tempv[i]);
	sBuffer.append(&quot;&amp;list%5B&quot;).append(i).append(&quot;%5D%5BInCode%5D=&quot;);


}

String keywordStr = sBuffer.toString();
vars.put(&quot;upshelfdetail&quot;,keywordStr);</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="创建上架" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${upshelfdetail}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">/WareHouseIN/AddShelf/UpShelf</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">http://58.240.229.37:8015/WareHouseIN/AddShelf/AddShelf?inId=742601&amp;inCode=RCG901190709000020&amp;WarehouseID=24304&amp;MemberID=24305&amp;systemCode=wms</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">zh-CN,zh;q=0.9</stringProp>
                      </elementProp>
                      <elementProp name="Origin" elementType="Header">
                        <stringProp name="Header.name">Origin</stringProp>
                        <stringProp name="Header.value">http://58.240.229.37:8015</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36</stringProp>
                      </elementProp>
                      <elementProp name="the_request_service" elementType="Header">
                        <stringProp name="Header.name">the_request_service</stringProp>
                        <stringProp name="Header.value">wms</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="获取上架ID" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="inId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">inId</stringProp>
                        <stringProp name="Argument.value">${inid}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="WarehouseID" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">WarehouseID</stringProp>
                        <stringProp name="Argument.value">${warehouseID_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="sort" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">sort</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="order" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">order</stringProp>
                        <stringProp name="Argument.value">asc</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
                  <stringProp name="HTTPSampler.path">/WareHouseIN/ShelfManage/GetShelfInfoByInId</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">http://58.240.229.37:8015/WareHouseIN/ShelfManage/ShelfManage?systemCode=wms&amp;moduleTitle=%E4%B8%8A%E6%9E%B6%E7%AE%A1%E7%90%86</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">zh-CN,zh;q=0.9</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36</stringProp>
                      </elementProp>
                      <elementProp name="the_request_service" elementType="Header">
                        <stringProp name="Header.name">the_request_service</stringProp>
                        <stringProp name="Header.value">wms</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正则表达式提取器" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">UpShelvesID</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;UpShelvesID&quot;:(.+?),</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default"></stringProp>
                    <stringProp name="RegexExtractor.match_number">0</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="1542765598">&quot;UpShelvesStatusName&quot;:&quot;已提交&quot;</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="进入上架单" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="upShelvesId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">upShelvesId</stringProp>
                        <stringProp name="Argument.value">${UpShelvesID}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="WarehouseID" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">WarehouseID</stringProp>
                        <stringProp name="Argument.value">${warehouseID_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="InId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">InId</stringProp>
                        <stringProp name="Argument.value">${inid}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="MemberID" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">MemberID</stringProp>
                        <stringProp name="Argument.value">${memberID_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">/WareHouseIN/EditShelf/GetShelfDetailInfoById</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">http://58.240.229.37:8015/WareHouseIN/EditShelf/EditShelf/5083201?WarehouseID=24304&amp;MemberID=24305&amp;inId=742901&amp;systemCode=wms</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">zh-CN,zh;q=0.9</stringProp>
                      </elementProp>
                      <elementProp name="Origin" elementType="Header">
                        <stringProp name="Header.name">Origin</stringProp>
                        <stringProp name="Header.value">http://58.240.229.37:8015</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36</stringProp>
                      </elementProp>
                      <elementProp name="the_request_service" elementType="Header">
                        <stringProp name="Header.name">the_request_service</stringProp>
                        <stringProp name="Header.value">wms</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="生成上架确认信息" enabled="true">
                    <stringProp name="filename"></stringProp>
                    <stringProp name="parameters"></stringProp>
                    <boolProp name="resetInterpreter">false</boolProp>
                    <stringProp name="script">import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray; 
import com.alibaba.fastjson.JSONObject;
// 获取数据

String response = prev.getResponseDataAsString();  // 获取Response

JSONObject responseObj = JSON.parseObject(response);  // 整个Response作为JSON对象

JSONArray listArray = responseObj.getJSONArray(&quot;rows&quot;);  // 获取列表。即，json串中[]的内容


String posid = vars.get(&quot;pos_g1&quot;);
String poscode = vars.get(&quot;pos_g2&quot;);

int len = listArray.size();


//
StringBuffer sBuffer = new StringBuffer(&quot;&quot;);
//


for(int i=0;i&lt;len;i++){
	
//
	JSONObject pos= listArray.getJSONObject(i);
	pos.put(&quot;PosID&quot;,posid);
	pos.put(&quot;PosCode&quot;,poscode);
	String str = JSON.toJSONString(pos);
	sBuffer.append(str).append(&quot;,&quot;);



}

String keywordStr = sBuffer.deleteCharAt(sBuffer.length()-1).toString();
vars.put(&quot;param&quot;,keywordStr);</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="上架确认" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="param" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">param</stringProp>
                        <stringProp name="Argument.value">[${param}]</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="inId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">inId</stringProp>
                        <stringProp name="Argument.value">${inid}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="WarehouseID" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">WarehouseID</stringProp>
                        <stringProp name="Argument.value">${warehouseID_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="MemberID" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">MemberID</stringProp>
                        <stringProp name="Argument.value">${memberID_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="upShelvesId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">upShelvesId</stringProp>
                        <stringProp name="Argument.value">${UpShelvesID}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">/WareHouseIN/EditShelf/AddShelfFact</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">http://58.240.229.37:8015/WareHouseIN/EditShelf/EditShelf/5083201?WarehouseID=24304&amp;MemberID=24305&amp;inId=742901&amp;systemCode=wms</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">zh-CN,zh;q=0.9</stringProp>
                      </elementProp>
                      <elementProp name="Origin" elementType="Header">
                        <stringProp name="Header.name">Origin</stringProp>
                        <stringProp name="Header.value">http://58.240.229.37:8015</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36</stringProp>
                      </elementProp>
                      <elementProp name="the_request_service" elementType="Header">
                        <stringProp name="Header.name">the_request_service</stringProp>
                        <stringProp name="Header.value">wms</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="251164327">&quot;Success&quot;:true</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="入库确认" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">1</stringProp>
              </LoopController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="核对入库单" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="OrderID" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">OrderID</stringProp>
                        <stringProp name="Argument.value">${inid}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="OrderType" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">OrderType</stringProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="WarehouseID" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">WarehouseID</stringProp>
                        <stringProp name="Argument.value">${warehouseID_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="MemberID" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">MemberID</stringProp>
                        <stringProp name="Argument.value">${memberID_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">/LogisticsCode/LogisticsCode/LogisticsCodeJudge</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">http://58.240.229.37:8015/WareHouseIN/WareConfirm/WareConfirm?systemCode=wms&amp;moduleTitle=%E5%85%A5%E5%BA%93%E7%A1%AE%E8%AE%A4</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">zh-CN,zh;q=0.9</stringProp>
                      </elementProp>
                      <elementProp name="Origin" elementType="Header">
                        <stringProp name="Header.name">Origin</stringProp>
                        <stringProp name="Header.value">http://58.240.229.37:8015</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36</stringProp>
                      </elementProp>
                      <elementProp name="the_request_service" elementType="Header">
                        <stringProp name="Header.name">the_request_service</stringProp>
                        <stringProp name="Header.value">wms</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="登记入库信息" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="WarehouseID" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">WarehouseID</stringProp>
                        <stringProp name="Argument.value">${warehouseID_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="ioId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">ioId</stringProp>
                        <stringProp name="Argument.value">${inid}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="ioType" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">ioType</stringProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/DataCenter/InOutOperateLog/GetOperationRecord</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">http://uit.wms.wi.fineex.com:8181/WareHouseIN/WareConfirm/WareConfirm?systemCode=wms&amp;moduleTitle=%E5%85%A5%E5%BA%93%E7%A1%AE%E8%AE%A4</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">zh-CN,zh;q=0.9</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36</stringProp>
                      </elementProp>
                      <elementProp name="the_request_service" elementType="Header">
                        <stringProp name="Header.name">the_request_service</stringProp>
                        <stringProp name="Header.value">wms</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="入库记录" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="record[IOID]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">record[IOID]</stringProp>
                        <stringProp name="Argument.value">${inid}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="record[IOCode]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">record[IOCode]</stringProp>
                        <stringProp name="Argument.value">${incode}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="record[IOType]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">record[IOType]</stringProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="record[BusinessType]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">record[BusinessType]</stringProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="record[MemberID]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">record[MemberID]</stringProp>
                        <stringProp name="Argument.value">${memberID_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="record[WareHouseID]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">record[WareHouseID]</stringProp>
                        <stringProp name="Argument.value">${warehouseID_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="record[IOTotalAmount]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">record[IOTotalAmount]</stringProp>
                        <stringProp name="Argument.value">${amount_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="record[Status]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">record[Status]</stringProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="record[IOCreateTime]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">record[IOCreateTime]</stringProp>
                        <stringProp name="Argument.value">/Date(${time2})/</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="record[IOConfirmAmount]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">record[IOConfirmAmount]</stringProp>
                        <stringProp name="Argument.value">8</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="record[SyncID]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">record[SyncID]</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="record[Memo]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">record[Memo]</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="record[CreateBy]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">record[CreateBy]</stringProp>
                        <stringProp name="Argument.value">0</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="record[CreateTime]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">record[CreateTime]</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="record[ConfirmTime]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">record[ConfirmTime]</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="record[ConfirmBy]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">record[ConfirmBy]</stringProp>
                        <stringProp name="Argument.value">0</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="record[IsConfirm]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">record[IsConfirm]</stringProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="details[0][IOID]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">details[0][IOID]</stringProp>
                        <stringProp name="Argument.value">${inid}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="details[0][IOType]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">details[0][IOType]</stringProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="details[0][FeeID]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">details[0][FeeID]</stringProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="details[0][Value]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">details[0][Value]</stringProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="details[0][UnitID]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">details[0][UnitID]</stringProp>
                        <stringProp name="Argument.value">201</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="details[0][CreateTime]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">details[0][CreateTime]</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="details[0][CreateBy]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">details[0][CreateBy]</stringProp>
                        <stringProp name="Argument.value">0</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="details[1][IOID]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">details[1][IOID]</stringProp>
                        <stringProp name="Argument.value">${inid}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="details[1][IOType]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">details[1][IOType]</stringProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="details[1][FeeID]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">details[1][FeeID]</stringProp>
                        <stringProp name="Argument.value">101</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="details[1][Value]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">details[1][Value]</stringProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="details[1][UnitID]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">details[1][UnitID]</stringProp>
                        <stringProp name="Argument.value">601</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="details[1][CreateTime]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">details[1][CreateTime]</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="details[1][CreateBy]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">details[1][CreateBy]</stringProp>
                        <stringProp name="Argument.value">0</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="details[2][IOID]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">details[2][IOID]</stringProp>
                        <stringProp name="Argument.value">${inid}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="details[2][IOType]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">details[2][IOType]</stringProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="details[2][FeeID]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">details[2][FeeID]</stringProp>
                        <stringProp name="Argument.value">201</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="details[2][Value]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">details[2][Value]</stringProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="details[2][UnitID]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">details[2][UnitID]</stringProp>
                        <stringProp name="Argument.value">701</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="details[2][CreateTime]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">details[2][CreateTime]</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="details[2][CreateBy]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">details[2][CreateBy]</stringProp>
                        <stringProp name="Argument.value">0</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="details[3][IOID]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">details[3][IOID]</stringProp>
                        <stringProp name="Argument.value">${inid}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="details[3][IOType]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">details[3][IOType]</stringProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="details[3][FeeID]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">details[3][FeeID]</stringProp>
                        <stringProp name="Argument.value">301</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="details[3][Value]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">details[3][Value]</stringProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="details[3][UnitID]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">details[3][UnitID]</stringProp>
                        <stringProp name="Argument.value">1101</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="details[3][CreateTime]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">details[3][CreateTime]</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="details[3][CreateBy]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">details[3][CreateBy]</stringProp>
                        <stringProp name="Argument.value">0</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="details[4][IOID]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">details[4][IOID]</stringProp>
                        <stringProp name="Argument.value">${inid}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="details[4][IOType]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">details[4][IOType]</stringProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="details[4][FeeID]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">details[4][FeeID]</stringProp>
                        <stringProp name="Argument.value">401</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="details[4][Value]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">details[4][Value]</stringProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="details[4][UnitID]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">details[4][UnitID]</stringProp>
                        <stringProp name="Argument.value">1601</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="details[4][CreateTime]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">details[4][CreateTime]</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="details[4][CreateBy]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">details[4][CreateBy]</stringProp>
                        <stringProp name="Argument.value">0</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="details[5][IOID]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">details[5][IOID]</stringProp>
                        <stringProp name="Argument.value">${inid}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="details[5][IOType]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">details[5][IOType]</stringProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="details[5][FeeID]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">details[5][FeeID]</stringProp>
                        <stringProp name="Argument.value">501</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="details[5][Value]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">details[5][Value]</stringProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="details[5][UnitID]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">details[5][UnitID]</stringProp>
                        <stringProp name="Argument.value">2101</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="details[5][CreateTime]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">details[5][CreateTime]</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="details[5][CreateBy]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">details[5][CreateBy]</stringProp>
                        <stringProp name="Argument.value">0</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="details[6][IOID]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">details[6][IOID]</stringProp>
                        <stringProp name="Argument.value">${inid}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="details[6][IOType]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">details[6][IOType]</stringProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="details[6][FeeID]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">details[6][FeeID]</stringProp>
                        <stringProp name="Argument.value">601</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="details[6][Value]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">details[6][Value]</stringProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="details[6][UnitID]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">details[6][UnitID]</stringProp>
                        <stringProp name="Argument.value">3601</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="details[6][CreateTime]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">details[6][CreateTime]</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="details[6][CreateBy]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">details[6][CreateBy]</stringProp>
                        <stringProp name="Argument.value">0</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="details[7][IOID]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">details[7][IOID]</stringProp>
                        <stringProp name="Argument.value">${inid}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="details[7][IOType]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">details[7][IOType]</stringProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="details[7][FeeID]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">details[7][FeeID]</stringProp>
                        <stringProp name="Argument.value">701</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="details[7][Value]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">details[7][Value]</stringProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="details[7][UnitID]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">details[7][UnitID]</stringProp>
                        <stringProp name="Argument.value">4101</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="details[7][CreateTime]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">details[7][CreateTime]</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="details[7][CreateBy]" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">true</boolProp>
                        <stringProp name="Argument.name">details[7][CreateBy]</stringProp>
                        <stringProp name="Argument.value">0</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">/DataCenter/InOutOperateLog/Add</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">http://uit.wms.wi.fineex.com:8181/WareHouseIN/WareConfirm/WareConfirm?systemCode=wms&amp;moduleTitle=%E5%85%A5%E5%BA%93%E7%A1%AE%E8%AE%A4</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">zh-CN,zh;q=0.9</stringProp>
                      </elementProp>
                      <elementProp name="Origin" elementType="Header">
                        <stringProp name="Header.name">Origin</stringProp>
                        <stringProp name="Header.value">http://uit.wms.wi.fineex.com:8181</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36</stringProp>
                      </elementProp>
                      <elementProp name="the_request_service" elementType="Header">
                        <stringProp name="Header.name">the_request_service</stringProp>
                        <stringProp name="Header.value">wms</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="检查入库商品" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="inId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">inId</stringProp>
                        <stringProp name="Argument.value">${inid}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="WarehouseID" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">WarehouseID</stringProp>
                        <stringProp name="Argument.value">${warehouseID_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="MemberID" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">MemberID</stringProp>
                        <stringProp name="Argument.value">${memberID_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="inCode" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">inCode</stringProp>
                        <stringProp name="Argument.value">${incode}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">/WareHouseIN/WareConfirm/ConfirmValidate</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">http://58.240.229.37:8015/WareHouseIN/WareConfirm/WareConfirm?systemCode=wms&amp;moduleTitle=%E5%85%A5%E5%BA%93%E7%A1%AE%E8%AE%A4</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">zh-CN,zh;q=0.9</stringProp>
                      </elementProp>
                      <elementProp name="Origin" elementType="Header">
                        <stringProp name="Header.name">Origin</stringProp>
                        <stringProp name="Header.value">http://58.240.229.37:8015</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36</stringProp>
                      </elementProp>
                      <elementProp name="the_request_service" elementType="Header">
                        <stringProp name="Header.name">the_request_service</stringProp>
                        <stringProp name="Header.value">wms</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="入库确认" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="inId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">inId</stringProp>
                        <stringProp name="Argument.value">${inid}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="WarehouseID" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">WarehouseID</stringProp>
                        <stringProp name="Argument.value">${warehouseID_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="MemberID" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">MemberID</stringProp>
                        <stringProp name="Argument.value">${memberID_1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="inCode" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">inCode</stringProp>
                        <stringProp name="Argument.value">${incode}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain"></stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol"></stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">/WareHouseIN/WareConfirm/Confirm</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP信息头管理器" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">http://58.240.229.37:8015/WareHouseIN/WareConfirm/WareConfirm?systemCode=wms&amp;moduleTitle=%E5%85%A5%E5%BA%93%E7%A1%AE%E8%AE%A4</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">zh-CN,zh;q=0.9</stringProp>
                      </elementProp>
                      <elementProp name="Origin" elementType="Header">
                        <stringProp name="Header.name">Origin</stringProp>
                        <stringProp name="Header.value">http://58.240.229.37:8015</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36</stringProp>
                      </elementProp>
                      <elementProp name="the_request_service" elementType="Header">
                        <stringProp name="Header.name">the_request_service</stringProp>
                        <stringProp name="Header.value">wms</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="响应断言" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1016001425">&quot;errorMsg&quot;:[&quot;确认成功！&quot;],</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">16</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="释放账号和反馈结果" enabled="true"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="释放登陆账号" enabled="true">
              <stringProp name="dataSource">test</stringProp>
              <stringProp name="query">update auto_testuser set status=0 where testuser=&apos;${user_1}&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">user</stringProp>
            </JDBCSampler>
            <hashTree/>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="标记任务成功" enabled="true">
              <stringProp name="dataSource">test</stringProp>
              <stringProp name="query">update auto_operation set status=2 where operation=&quot;全量入库&quot;;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Update Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="检查测试结果" enabled="true">
          <stringProp name="IfController.condition">${control} == 1;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="标记任务最终结果" enabled="true">
            <stringProp name="dataSource">test</stringProp>
            <stringProp name="query">update auto_operation set 
`status`=CASE 
	WHEN `status`=2 THEN 0
		
	ELSE
		3
END 

,
result=CASE 
	WHEN `status`=0 THEN &quot;上次执行：成功&quot;
	WHEN `status`=1 THEN &quot;上次执行：运行中&quot;
	WHEN `status`=2 THEN &quot;上次执行：成功&quot;
		
	ELSE
		&quot;上次执行：失败&quot;
END

where operation=&apos;全量入库&apos;
;
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Update Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCSampler>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
